buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version = rootProject.ext.has("kotlinVersion") ?
      rootProject.ext.get("kotlinVersion") :
      project.properties["SherpaOnnxOfflineTts_kotlinVersion"]

  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:8.0.2"
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

def reactNativeArchitectures() {
  def value = rootProject.getProperties().get("reactNativeArchitectures")
  return value ? value.split(",") : ["armeabi-v7a", "arm64-v8a"]
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name)
      ? rootProject.ext.get(name)
      : project.properties["SherpaOnnxOfflineTts_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name)
      ? rootProject.ext.get(name)
      : (project.properties["SherpaOnnxOfflineTts_" + name]).toInteger()
}

def supportsNamespace() {
  def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()
  // Namespace support was added in 7.3.0
  return (major == 7 && minor >= 3) || major >= 8
}

android {
  if (supportsNamespace()) {
    namespace "com.sherpaonnxofflinetts"
    sourceSets {
      main {
        manifest.srcFile "src/main/AndroidManifestNew.xml"
        assets.srcDirs += ['../ios/Resources']
      }
    }
  }

  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  // (opcional pero recomendable) alinear Kotlin/JVM
  kotlinOptions {
    jvmTarget = "1.8"
  }

  packagingOptions {
    // evita choques entre sherpa / onnxruntime / c++ runtime
    pickFirst "lib/**/libonnxruntime.so"
    pickFirst "lib/**/libc++_shared.so"
  }
}

repositories {
  google()
  mavenCentral()

  // Permite resolver el .aar precompilado que viene en esta lib
  flatDir {
    dirs 'libs'
  }
}

def kotlin_version = getExtOrDefault("kotlinVersion")

dependencies {
  // React Native base
  implementation "com.facebook.react:react-native:+"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

  // ⚠ IMPORTANTE:
  // Le damos el .aar solo para COMPILAR el módulo Sherpa,
  // pero NO intentamos que Sherpa lo empaquete dentro de su propio AAR.
  compileOnly files('libs/sherpa-onnx-1.10.35.aar')
}

/**
 * WORKAROUND Gradle/AGP 8:
 * Cuando Gradle intenta crear el AAR de ESTE módulo (bundleDebugAar / bundleReleaseAar),
 * peta porque AGP no permite dependencias .aar locales dentro de otra librería AAR.
 * Deshabilitamos esas tareas para que este módulo solo se consuma dentro de la app,
 * no como AAR publicable. Esto es válido en librerías RN usadas directamente por la app. 
 * (AGP te avisa de esto explícitamente en el error 'Direct local .aar file dependencies ...'). 
 * :contentReference[oaicite:3]{index=3}
 */
// Disable AAR bundling tasks (Gradle 8+ strict mode workaround)
tasks.whenTaskAdded { task ->
    if (task.name == "bundleDebugAar" || task.name == "bundleReleaseAar") {
        task.enabled = false
    }
}